import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.text.DecimalFormat;

public class CalculadoraGUI extends JFrame {

    private JTextField campoVelocidade, campoAltura;
    private JComboBox<String> planetaBox;
    private JTextArea resultadoArea;

    private static final String[] planetas = {
        "Terra", "Lua", "Marte", "J√∫piter", "V√™nus", "Merc√∫rio", "Saturno", "Urano", "Netuno"
    };

    public CalculadoraGUI() {
        // Janela principal
        setTitle("üåå Calculadora de Lan√ßamento Vertical");
        setSize(600, 540);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout(15, 15));
    
        // üé® Paleta de cores
        Color fundo = new Color(245, 245, 250);
        Color destaque = new Color(60, 120, 200);
        Color branco = Color.WHITE;
        Color cinzaClaro = new Color(230, 230, 240);
        Color bordaLeve = new Color(200, 200, 220);
    
        getContentPane().setBackground(fundo);


        // üñåÔ∏è Estilo do t√≠tulo
        JLabel titulo = new JLabel("Calculadora de Lan√ßamento Vertical");
        titulo.setFont(new Font("Arial", Font.BOLD, 18));
        titulo.setHorizontalAlignment(SwingConstants.CENTER);
        titulo.setForeground(Color.BLACK);
        titulo.setBorder(BorderFactory.createEmptyBorder(15, 10, 15, 10));
        add(titulo, BorderLayout.NORTH);
        


    
        // üß© Painel de entrada com estilo
        JPanel painelEntradas = new JPanel(new GridLayout(4, 2, 15, 15));
        painelEntradas.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(bordaLeve),
            "üîß Dados de Entrada",
            0, 0, new Font("SansSerif", Font.BOLD, 14), destaque
        ));
        painelEntradas.setBackground(branco);
        painelEntradas.setPreferredSize(new Dimension(580, 200));
        painelEntradas.setOpaque(true);
    
        // üåç ComboBox Planetas
        JLabel labelPlaneta = new JLabel("üåç Selecione o planeta:");
        labelPlaneta.setFont(new Font("SansSerif", Font.PLAIN, 14));
        planetaBox = new JComboBox<>(planetas);
        planetaBox.setBackground(branco);
        planetaBox.setFont(new Font("SansSerif", Font.PLAIN, 13));
        planetaBox.setFocusable(false);
    
        // üí® Campo Velocidade
        JLabel labelVelocidade = new JLabel("Velocidade inicial (m/s):");
        labelVelocidade.setFont(new Font("SansSerif", Font.PLAIN, 14));
        campoVelocidade = new JTextField();
        campoVelocidade.setFont(new Font("SansSerif", Font.PLAIN, 13));
        campoVelocidade.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(bordaLeve),
            BorderFactory.createEmptyBorder(5, 8, 5, 8)
        ));
    
        // üìè Campo Altura
        JLabel labelAltura = new JLabel("Altura inicial (m):");
        labelAltura.setFont(new Font("SansSerif", Font.PLAIN, 14));
        campoAltura = new JTextField();
        campoAltura.setFont(new Font("SansSerif", Font.PLAIN, 13));
        campoAltura.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(bordaLeve),
            BorderFactory.createEmptyBorder(5, 8, 5, 8)
        ));
    
        // üîò Bot√£o estilizado e sempre vis√≠vel
        JButton botaoCalcular = new JButton("üöÄ Calcular");
        botaoCalcular.setFont(new Font("SansSerif", Font.BOLD, 14));
        botaoCalcular.setForeground(Color.WHITE);
        botaoCalcular.setBackground(new Color(45, 110, 190));
        botaoCalcular.setFocusPainted(false);
        botaoCalcular.setOpaque(true);
        botaoCalcular.setBorderPainted(false);
        botaoCalcular.setCursor(new Cursor(Cursor.HAND_CURSOR));

        // üîÅ Efeito hover (mudan√ßa de cor ao passar o mouse)
        botaoCalcular.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                botaoCalcular.setBackground(new Color(30, 90, 160));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                botaoCalcular.setBackground(new Color(45, 110, 190));
            }
        });


    
        // ‚ûï Adiciona os componentes ao painel
        painelEntradas.add(labelPlaneta);
        painelEntradas.add(planetaBox);
        painelEntradas.add(labelVelocidade);
        painelEntradas.add(campoVelocidade);
        painelEntradas.add(labelAltura);
        painelEntradas.add(campoAltura);
        painelEntradas.add(new JLabel()); // espa√ßo vazio
        painelEntradas.add(botaoCalcular);
    
        add(painelEntradas, BorderLayout.CENTER);
    
        // üßæ √Årea de resultado
        resultadoArea = new JTextArea();
        resultadoArea.setEditable(false);
        resultadoArea.setFont(new Font("Monospaced", Font.PLAIN, 13));
        resultadoArea.setLineWrap(true);
        resultadoArea.setWrapStyleWord(true);
        resultadoArea.setBackground(branco);
        resultadoArea.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createTitledBorder("üìä Resultados"),
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
    
        JScrollPane scroll = new JScrollPane(resultadoArea);
        scroll.setBorder(BorderFactory.createEmptyBorder(10, 20, 20, 20));
        scroll.getVerticalScrollBar().setUnitIncrement(10);
        add(scroll, BorderLayout.SOUTH);
    
        // A√ß√£o do bot√£o
        botaoCalcular.addActionListener(e -> calcularResultados());
    }
    

    private void calcularResultados() {
    try {
        // üîπ Entrada e valida√ß√£o
        String planetaSelecionado = (String) planetaBox.getSelectedItem();
        String inputVelocidade = campoVelocidade.getText().trim().replace(",", ".");
        String inputAltura = campoAltura.getText().trim().replace(",", ".");

        if (inputVelocidade.isEmpty() || inputAltura.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "‚ö†Ô∏è Por favor, preencha todos os campos para continuar.",
                "Campos obrigat√≥rios",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        double v0 = Double.parseDouble(inputVelocidade);
        double y0 = Double.parseDouble(inputAltura);

        if (v0 < 0 || y0 < 0) {
            JOptionPane.showMessageDialog(this,
                "‚ö†Ô∏è Os valores n√£o podem ser negativos.",
                "Valor inv√°lido",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // üîπ C√°lculo
        double g = Back.gravidadePorPlaneta(planetaSelecionado);
        double[] coef = Back.calcularCoeficientes(g, v0, y0);
        double a = coef[0], b = coef[1], c = coef[2];
        double tMax = Back.calcularTempoAlturaMax(a, b);
        double yMax = Back.calcularAlturaMaxima(a, b, c);
        double tTotal = Back.calcularTempoTotal(a, b, c);

        DecimalFormat df = new DecimalFormat("#0.00");

        // üîπ Construir resultado visual e explicativo
        StringBuilder sb = new StringBuilder();
        sb.append("üìê Equa√ß√£o da altura:\n");
        sb.append(String.format("y(t) = %s t¬≤ + %s t + %s\n\n",
            df.format(a), df.format(b), df.format(c)));

        sb.append("üìä Resultados no planeta ").append(planetaSelecionado).append(" (g = ")
            .append(df.format(g)).append(" m/s¬≤):\n");
        sb.append("‚Ä¢ ‚ú® Tempo at√© altura m√°xima: ").append(df.format(tMax)).append(" s\n");
        sb.append("‚Ä¢ ‚ú® Altura m√°xima alcan√ßada: ").append(df.format(yMax)).append(" m\n");

        if (tTotal > 0) {
            sb.append("‚Ä¢ ‚ú® Tempo total at√© o solo: ").append(df.format(tTotal)).append(" s\n\n");
        } else {
            sb.append("\n‚ö†Ô∏è O objeto n√£o atinge o solo (sem ra√≠zes reais).\n\n");
        }

        // üîπ Interpreta√ß√£o extra para usu√°rio leigo
        sb.append("üßæ Interpreta√ß√£o:\n");
        sb.append("‚Ä¢ O corpo foi lan√ßado com velocidade de ").append(df.format(v0)).append(" m/s,");
        sb.append(" a partir de uma altura de ").append(df.format(y0)).append(" m.\n");
        sb.append("‚Ä¢ Levou ").append(df.format(tMax)).append(" s para atingir o ponto mais alto (")
            .append(df.format(yMax)).append(" m).\n");
        if (tTotal > 0) {
            sb.append("‚Ä¢ Retornou ao solo ap√≥s ").append(df.format(tTotal)).append(" s.\n");
        }

        resultadoArea.setText(sb.toString());

        // üîπ Confirma√ß√£o visual
        JOptionPane.showMessageDialog(this,
            "‚úÖ C√°lculo realizado com sucesso!\nO gr√°fico ser√° exibido a seguir.",
            "Conclu√≠do",
            JOptionPane.INFORMATION_MESSAGE);

        // üîπ Exibir gr√°fico apenas se v√°lido
        if (tTotal > 0) {
            sb.append("\nüìà Gr√°ficos gerados:\n");
            sb.append("‚úîÔ∏è Altura vs Tempo\n");
            sb.append("‚úîÔ∏è Velocidade vs Tempo");

            resultadoArea.setText(sb.toString());

            JOptionPane.showMessageDialog(this,
                "‚úÖ C√°lculo realizado com sucesso!\nOs gr√°ficos ser√£o exibidos a seguir.",
                "Conclu√≠do",
                JOptionPane.INFORMATION_MESSAGE);

            // Gr√°fico de Altura vs Tempo
            JFrame frameGrafico = new JFrame("üìà Gr√°fico da Trajet√≥ria");
            frameGrafico.add(new GraficoParabola(a, b, c, tTotal, planetaSelecionado, g));
            frameGrafico.pack();
            frameGrafico.setLocationRelativeTo(this);
            frameGrafico.setVisible(true);

            // Gr√°fico de Velocidade vs Tempo
            JFrame frameVelocidade = new JFrame("üìâ Velocidade vs Tempo");
            frameVelocidade.add(new GraficoVelocidadeTempo(v0, g, tTotal, planetaSelecionado));
            frameVelocidade.pack();
            frameVelocidade.setLocationRelativeTo(this);
            frameVelocidade.setVisible(true);

        } else {
            resultadoArea.setText(sb.toString());

            JOptionPane.showMessageDialog(this,
                "‚ö†Ô∏è C√°lculo feito, mas o objeto n√£o retornou ao solo.\nO gr√°fico de trajet√≥ria ser√° exibido.",
                "Aten√ß√£o",
                JOptionPane.WARNING_MESSAGE);

            JFrame frameGrafico = new JFrame("üìà Gr√°fico da Trajet√≥ria");
            frameGrafico.add(new GraficoParabola(a, b, c, 2 * tMax, planetaSelecionado, g)); // tTotal inv√°lido ‚Üí usa 2*tMax como aproxima√ß√£o
            frameGrafico.pack();
            frameGrafico.setLocationRelativeTo(this);
            frameGrafico.setVisible(true);
        }


        

    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this,
            "‚ùå Entrada inv√°lida. Use apenas n√∫meros (ex: 12.5 ou 1,8).",
            "Erro de formato",
            JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,
            "‚ùå Ocorreu um erro inesperado. Verifique os dados e tente novamente.",
            "Erro interno",
            JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
}


    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            CalculadoraGUI gui = new CalculadoraGUI();
            gui.setVisible(true);
        });
    }
}
